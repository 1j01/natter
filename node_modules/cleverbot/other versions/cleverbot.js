
var crypto = require('crypto');
var http = require('http');
var qs = require('querystring');

var allParams = "sessionid logurl vText8 vText7 vText6 vText5 vText4 vText3 vText2 prevref emotionalhistory ttsLocMP3 ttsLocTXT ttsLocTXT3 ttsText lineRef lineURL linePOST lineChoices lineChoicesAbbrev typingData divert"
	.split(" ");

function CleverBot(){
	if(!(this instanceof CleverBot)){ return new CleverBot(); }
	
	this.post_params = {
		start: 'y',
		icognoid: 'wsf',
		fno: '0',
		sub: 'Say',
		islearning: '1',
		cleanslate: 'false'
    };
	this.backlog = [];
}

CleverBot.prototype.think = function(message, callback){
	//if message is omitted have cleverbot respond to itself
	if(!callback){
		callback = message;
		message = "{pass}";
	}
	var self = this;
	self.post_params.stimulus = message;
	self.make_request(function(err, res){
		if(err){ return callback(err); }
		if(res.indexOf("DENIED")==0){ return callback(new Error("Access Denied")); }
		if(!res.match(/\r.*\r.*\r/)){ return callback(new Error("Not enough lines?")); }
		//note: the response format (on success) includes a fixed number of lines seperated by carrige returns (no line feeds)
		var lines = res.split("\r");
		//save the response data to post_params
		for(var i=0; i<allParams.length; i++){
			self.post_params[allParams[i]] = lines[i+1];
		}
		//extract Q/A data from lines
		var response = new CleverBotResponse(lines);
		if(response.answer === undefined){
			return callback(new Error("undefined?? I don't understand! :("));
		}
		//callback and log the response
		callback(undefined, response.answer);
		self.backlog.push(response);
	});
};

CleverBot.prototype.build_query = function(){
	//generate a querystring, take the hash of part of it, and use the hash as a value in the final query string
	var qs4hash = qs.stringify(this.post_params);
	var hashthis = qs4hash.substring(9, 35); //the ruby implementation is current_query[9..34]
	this.post_params.icognocheck = crypto
		.createHash('md5')
		.update(hashthis) 
		.digest('hex');
	//console.log("Hash This: ",hashthis);
	//console.log("icoGnoCheck: ",this.post_params.icognocheck);
	return qs.stringify(this.post_params);
};

CleverBot.prototype.make_request = function(callback){
	var post_data = this.build_query();
	var post_options = {
		method: 'POST',
		host: 'www.cleverbot.com',
		path: '/webservicemin',
		port: '80',
		headers: {
			'Cache-Control': 'no-cache',
			'Origin': 'http://www.cleverbot.com',
			//'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.65 Safari/537.36',
			'User-Agent': 'Mozilla/0.0 (Node, like awesome)',
			'Content-Type': 'application/x-www-form-urlencoded',
			'Accept': '*/*',
			'DNT': '1',
			'Pragma': 'no-cache',
			'Referer': 'http://www.cleverbot.com/',
			//DON'T accept encodings!
			//'Accept-Encoding': 'gzip,deflate,sdch',
			'Accept-Language': 'en-US,en;q=0.8,ar;q=0.6',
			'Content-Length': post_data.length
		}
	};
	return http.request(post_options, function(res){
		res.setEncoding('utf8');
		res.body = "";
		res.on('data', function(chunk){
			res.body += chunk;
		});
		res.on('end', function(){
			if(res.statusCode == 200){
				callback(undefined, res.body);
			}else{
				callback(new Error("HTTP "+res.statusCode));
			}
		});
	}).on('error', function(err){
		callback(err);
	}).end(post_data);
};

function CleverBotResponse(response_data){
	this.question = response_data[8];
	this.answer = response_data[16];
}

module.exports = exports = CleverBot;
