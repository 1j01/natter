
// TODO: icon / style for directories
// TODO: arrow key navigation
// TODO: make icons extensible

var fs = require('fs');
var parse = require('url').parse;
var path = require('path');

var error = function(code, msg){
	var err = new Error(msg || code);
	err.status = code;
	return err;
};

var cache = {};
function getIcon(icon) {
	return cache[icon] || (cache[icon] = fs.readFileSync(__dirname + '/icons/' + icon + '.png', 'base64'));
}

/*var icons = {
	'.js': 'page_white_code_red.png',
	'.c': 'page_white_c.png',
	'.h': 'page_white_h.png',
	'.cc': 'page_white_cplusplus.png',
	'.php': 'page_white_php.png',
	'.rb': 'page_white_ruby.png',
	'.cpp': 'page_white_cplusplus.png',
	'.swf': 'page_white_flash.png',
	'.pdf': 'page_white_acrobat.png',
	'default': 'page_white.png',
};*/

exports = module.exports = function(root, options){
	options = options || {};
	
	if (!root) throw new Error('directory() root path required');
	var showHidden = options.hidden;
	var showIcons = options.icons;
	var filter = options.filter;
	var root = path.normalize(root);
	return function directory(req, res, next) {
		if ('GET' != req.method && 'HEAD' != req.method) return next();
		
		var url = parse(req.url);
		var dir = decodeURIComponent(url.pathname);
		var _path = path.normalize(path.join(root, dir));
		var originalUrl = parse(req.originalUrl);
		var originalDir = decodeURIComponent(originalUrl.pathname);
		var canGoUp = _path != root;
		
		// null byte(s), bad request
		if(~_path.indexOf('\0')) return next(error(400));
		
		// malicious path, forbidden
		if(0 != _path.indexOf(root)) return next(error(403));
		
		// check if we have a directory
		fs.stat(_path, function(err, stats){
			if(err){
				return 'ENOENT' == err.code
					? next()
					: next(err);
			}
			
			if(!stats.isDirectory()){ return next(); }
			
			// fetch files
			fs.readdir(_path, function(err, files){
				if(err){ return next(err); }
				if(!showHidden){ files = removeHidden(files); }
				if(filter){ files = files.filter(filter); }
				files.sort();
				
				var statted = 0;
				files.forEach(function(file){
					fs.stat(file, function(err, stats){
						file.stats = stats;
						err && console.log(err);
						if(++statted >= files.length){
							htmlDirectory(req, res, files, next, originalDir, canGoUp, showIcons);
						}
					});
				});
				
			});
		});
	};
};

function htmlDirectory(req, res, files, next, dir, showUpdir, showIcons){
	var style = "";
	if(showIcons){
		files.forEach(function(file,i,a){
			var className = file.stats.isDirectory()?'directory':(path.extname(file).replace('.','') || 'default');
			var imageData = 'data:image/png;base64,'
			try {
				imageData += getIcon(className);
			} catch(e) {
				imageData += getIcon(className = 'default');
			}
			/*style += "\n."+class+":before {\n\t"
				+ "background-image: url('"+imageData+"');\n\t"
				+ "background-size: 10px 20px;\n}\n"*/
			style += "\n."+className+":before {\n\t"
				+ "content: url('"+imageData+"');\n\t"
				+ "width: 16px; height: 16px;\n}\n";
			
			file.className = className;
		});
	}
	fs.readFile(__dirname + 'directory.html', 'utf8', function(err, html){
		if (err) return next(err);
		if (showUpdir) files.unshift('..');
		html = html
			.replace('{style}', style)
			.replace('{files}', htmlFiles(files, dir, showIcons))
			.replace('{linked-path}', htmlPath(dir))
			.replace('{directory}', dir);
		res.setHeader('Content-Type', 'text/html');
		res.setHeader('Content-Length', html.length);
		res.end(html);
	});
};

function htmlPath(dir) {
	var curr = [];
	return dir.split('/').map(function(part){
		curr.push(encodeURIComponent(part));
		return part ? '<a href="' + curr.join('/') + '">' + part + '</a>' : '';
	}).join('/');
}

function htmlFiles(files, dir, showIcons) {
	return '<ul id="files">' + files.map(function(file){
		var classes = [];
		var _path = dir.split('/').map(encodeURIComponent);
		
		if (file !== '..') {
			classes.push('?');
		}
		
		_path.push(encodeURIComponent(file));
		
		//utils.normalizeSlashes returns path.split(path.sep).join('/');
		//why was there a call to it? idk
		return '<li><a href="'+ path.normalize(path.join('/'))+'"'
			+ ' class="'+classes.join(' ')+'">' + file + '</a></li>';
		
	}).join('\n') + '</ul>';
}


function removeHidden(files) {
	return files.filter(function(file){
		return '.' != file[0];
	});
}
